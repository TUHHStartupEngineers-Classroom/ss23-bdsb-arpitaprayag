[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Analyze the sales by location (state) with a bar plot. Since state and city are multiple features (variables), they should be split. Which state has the highes revenue? Replace your bike_orderlines_wrangled_tbl object with the newly wrangled object (with the columns state and city)."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Acquisition",
    "section": "",
    "text": "library(RSQLite)\nlibrary(dplyr)\n\n#&gt; \n#&gt; Attaching package: 'dplyr'\n\n\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n\n\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\n\nlibrary(httr)\nlibrary(glue)\nlibrary(jsonlite)\nlibrary(keyring)\nlibrary(rstudioapi)\nlibrary(rvest)\n\n\n\n\n\nresponse &lt;- GET(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood\")\n\n\n\n\n\nif (response$status_code == 200) {\n  # The request was successful\n  # Get the response data\n\n  meals_db &lt;- response %&gt;%\n    .$content %&gt;%\n    rawToChar() %&gt;%\n    fromJSON()\n  \n  as.data.frame(meals_db)\n} else {\n  # The request failed\n  print(response$status_code)\n}\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nurl &lt;- \"https://www.rosebikes.de/\"\n\n\n\n\n\nhtml &lt;- read_html(url)\n\n# Find the elements that contain the model names\nmodel_names &lt;- html %&gt;%\n  html_nodes(\".products-slider-tile__product-name\") %&gt;%\n  html_text()\n\n# Find the elements that contain the prices\nprices &lt;- html %&gt;%\n  html_nodes(\".product-tile-price__current-value\") %&gt;%\n  html_text()\n\n# Extract the number using regular expressions\nprice &lt;- gsub(\"[^0-9.,]\", \"\", prices)  # Remove all non-digit, non-decimal, and non-comma characters\n\n\n\n\n\ndatabase &lt;- data.frame(\n  Model = model_names,\n  Price = price\n)\n\ndatabase"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#running-code",
    "href": "content/01_journal/01_tidyverse.html#running-code",
    "title": "Tidyverse",
    "section": "2 Running Code",
    "text": "2 Running Code\n\n2.0 Load libraries\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(writexl)\n\n\n\n2.1 Importing Files\n\nbikes_tbl &lt;- read_excel(path =\"C:/Users/arpit/OneDrive/Documents/GitHub/repo/ss23-bdsb-arpitaprayag/assets/data/ds_data/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(path =  \"C:/Users/arpit/OneDrive/Documents/GitHub/repo/ss23-bdsb-arpitaprayag/assets/data/ds_data/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"C:/Users/arpit/OneDrive/Documents/GitHub/repo/ss23-bdsb-arpitaprayag/assets/data/ds_data/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n\n\n2.2 Examining Data\n\n# Print it to the console\norderlines_tbl\n\n\n\n  \n\n\n\n\n\n2.3 Joining Data\n\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\nbike_orderlines_joined_tbl\n\n\n\n  \n\n\n\n\n\n2.4 Wrangling Data\n\nbike_states_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  # 5.1 Separate state and city name\n  separate(location, into = c(\"city\", \"state\"), sep = \", \") %&gt;%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity)\n\nsales_by_states_tbl &lt;- bike_states_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(order.date, total.price, state) %&gt;%\n  mutate(year = year(order.date)) %&gt;%\n  \n  # Group by and summarize year and states\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total.price)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_states_tbl"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#tidyverse-challenge",
    "href": "content/01_journal/01_tidyverse.html#tidyverse-challenge",
    "title": "Tidyverse",
    "section": "",
    "text": "Analyze the sales by location (state) with a bar plot. Since state and city are multiple features (variables), they should be split. Which state has the highes revenue? Replace your bike_orderlines_wrangled_tbl object with the newly wrangled object (with the columns state and city)."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#visualize",
    "href": "content/01_journal/01_tidyverse.html#visualize",
    "title": "Tidyverse",
    "section": "3 Visualize",
    "text": "3 Visualize\n\nsales_by_states_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n  # to your plotting code to rotate your x-axis labels\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Facet\n  facet_wrap(~ state) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by state\",\n    subtitle = \"North Rhine-Westphalia has highest revenue\",\n    fill = \"States\" # Changes the legend name\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#running-code",
    "href": "content/01_journal/02_data_acquisition.html#running-code",
    "title": "Acquisition",
    "section": "",
    "text": "library(RSQLite)\nlibrary(dplyr)\n\n#&gt; \n#&gt; Attaching package: 'dplyr'\n\n\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n\n\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\n\nlibrary(httr)\nlibrary(glue)\nlibrary(jsonlite)\nlibrary(keyring)\nlibrary(rstudioapi)\nlibrary(rvest)\n\n\n\n\n\nresponse &lt;- GET(\"https://www.themealdb.com/api/json/v1/1/filter.php?c=Seafood\")\n\n\n\n\n\nif (response$status_code == 200) {\n  # The request was successful\n  # Get the response data\n\n  meals_db &lt;- response %&gt;%\n    .$content %&gt;%\n    rawToChar() %&gt;%\n    fromJSON()\n  \n  as.data.frame(meals_db)\n} else {\n  # The request failed\n  print(response$status_code)\n}"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#scrape-one-of-the-competitor-websites-of-canyon",
    "href": "content/01_journal/02_data_acquisition.html#scrape-one-of-the-competitor-websites-of-canyon",
    "title": "Acquisition",
    "section": "",
    "text": "url &lt;- \"https://www.rosebikes.de/\"\n\n\n\n\n\nhtml &lt;- read_html(url)\n\n# Find the elements that contain the model names\nmodel_names &lt;- html %&gt;%\n  html_nodes(\".products-slider-tile__product-name\") %&gt;%\n  html_text()\n\n# Find the elements that contain the prices\nprices &lt;- html %&gt;%\n  html_nodes(\".product-tile-price__current-value\") %&gt;%\n  html_text()\n\n# Extract the number using regular expressions\nprice &lt;- gsub(\"[^0-9.,]\", \"\", prices)  # Remove all non-digit, non-decimal, and non-comma characters\n\n\n\n\n\ndatabase &lt;- data.frame(\n  Model = model_names,\n  Price = price\n)\n\ndatabase"
  }
]